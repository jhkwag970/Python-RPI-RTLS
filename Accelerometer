
import pandas as pd
import numpy as np
import math, os, datetime, kbhit, time
from datetime import datetime
import time
import board
import adafruit_icm20x

analysisPath = "Python-RPI-RTLS/analysis_csv/"
accelPath = "Python-RPI-RTLS/accel_csv/"

def toCSV(path, fileName, df):
    os.chdir(path)
    df.to_csv(fileName, index=False)
    os.chdir("../../")


v_x=[]
v_y=[]
p_x=[]
p_y=[]
def Accelerometer():
    global v_x, v_y, p_x, p_y
    i2c = board.I2C()  # uses board.SCL and board.SDA
    icm = adafruit_icm20x.ICM20948(i2c)
    lx = kbhit.lxTerm()
    lx.start()
    x=[]
    y=[]
    z=[]

    v_x.append(0)
    v_y.append(0)
    p_x.append(0)
    p_y.append(0)
    dateList=[]
    i=0
    while True:
        date =datetime.now().strftime('%S.%f')
        print(icm.acceleration)
        x.append(icm.acceleration[0])
        y.append(icm.acceleration[1])
        z.append(icm.acceleration[2])
        dateList.append(float(date))
        
        if i != 0:
            position(dateList, x, y)
        else: 
            i+=1
         
        if lx.kbhit(): 
            c = lx.getch() 
            c_ord = ord(c)
            if c_ord == 32: # Spacebar
                print("\nStop")
                break
        time.sleep(0.1)
    df = pd.DataFrame({"time": dateList,"x": x, "y": y, "z":z, "v_x": v_x, "v_y": v_y, "p_x": p_x, "p_y": p_y})
    toCSV(accelPath, "accel.csv", df)
def position(dateList, x, y):
    global v_x, v_y, p_x, p_y
    diff_time = dateList[-1] - dateList[-2]
    velocity_x = v_x[-1] + 0.5 *(x[-1] + x[-2]) + (diff_time)
    velocity_y = v_y[-1] + 0.5 *(y[-1] + y[-2]) + (diff_time)
    v_x.append(velocity_x)
    v_y.append(velocity_y)

    position_x = p_x[-1] + 0.5 * (v_x[-1] + v_x[-2]) + diff_time
    position_y = p_y[-1] + 0.5 * (v_y[-1] + v_y[-2]) + diff_time
    p_x.append(position_x)
    p_y.append(position_y)

def position2(dateList, x, y):
    global v_x, v_y, p_x, p_y
    v_x.append(np.trapz(dateList[-2:], x[-2:]))
    v_y.append(np.trapz(dateList[-2:], y[-2:]))

    p_x.append(np.trapz(dateList[-2:], v_x[-2:]))
    p_y.append(np.trapz(dateList[-2:], v_y[-2:]))

Accelerometer()